name: Fly Deploy
on:
  push:
    branches:
      - 'master'
env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.1-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      ENV: TEST
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/exam_depository_test
      AUTH_TOKEN: 00000000-0000-0000-0000-000000000000
      AWS_ACCESS_KEY_ID: some_key_id
      AWS_SECRET_ACCESS_KEY: some_secret_key
      AWS_S3_BUCKET_NAME: some_bucket_name
      AWS_S3_ENDPOINT_URL: endpoint_url
    steps:   
      - uses: actions/checkout@v4
      - name: Restore asdf cache
        id: asdf-cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}
      - name: Install asdf
        uses: asdf-vm/actions/install@v3
      - name: Restore poetry cache
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}
      - name: Install Dependencies
        run: make deps
      - name: Run Tests
        run: make test_once
  deploy:
      name: Deploy to fly.io
      runs-on: ubuntu-latest
      needs: test
      steps:
        - uses: actions/checkout@v4
        - uses: superfly/flyctl-actions/setup-flyctl@master
        - run: flyctl deploy --remote-only
